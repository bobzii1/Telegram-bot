import os
import logging
import telebot
from config import TELEGRAM_TOKEN
from flask import Flask, request
from keyboards import (
    get_main_keyboard, get_help_inline_keyboard, get_settings_keyboard, 
    get_yes_no_keyboard, get_stores_keyboard, get_store_actions_keyboard
)
from utils import format_bytes
from stores import get_all_stores, get_store_by_id, get_store_info

# Setup logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', 
    level=logging.INFO
)

logger = logging.getLogger(__name__)

# Create our bot instance
bot = telebot.TeleBot(TELEGRAM_TOKEN)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

# Command handlers
@bot.message_handler(commands=['start'])
def start_command(message):
    """Send a message when the command /start is issued."""
    user_first_name = message.from_user.first_name
    logger.info(f"User {message.from_user.id} started the bot")
    
    welcome_message = (
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user_first_name}!\n\n"
        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç —Å–µ—Ç–∏ –º–∞–≥–∞–∑–∏–Ω–æ–≤. –° –º–æ–µ–π –ø–æ–º–æ—â—å—é –≤—ã –º–æ–∂–µ—Ç–µ:\n"
        f"‚Ä¢ –ù–∞–π—Ç–∏ –±–ª–∏–∂–∞–π—à–∏–π –º–∞–≥–∞–∑–∏–Ω\n"
        f"‚Ä¢ –£–∑–Ω–∞—Ç—å –∞–¥—Ä–µ—Å –∏ —á–∞—Å—ã —Ä–∞–±–æ—Ç—ã\n"
        f"‚Ä¢ –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–∞–≥–∞–∑–∏–Ω–æ–º —á–µ—Ä–µ–∑ Telegram\n\n"
        f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏."
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    bot.send_message(message.chat.id, welcome_message, reply_markup=get_main_keyboard())

@bot.message_handler(commands=['help'])
def help_command(message):
    """Send a message when the command /help is issued."""
    help_text = (
        "ü§ñ *–ú–µ–Ω—é –ø–æ–º–æ—â–∏*\n\n"
        "–í–æ—Ç –∫–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ —è –ø–æ–Ω–∏–º–∞—é:\n\n"
        "*/start* - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "*/help* - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–º–æ—â–∏\n"
        "*/stores* - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –º–∞–≥–∞–∑–∏–Ω–æ–≤\n"
        "*/about* - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ\n\n"
        "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –Ω–∏–∂–µ:"
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–º–æ—â–∏ —Å inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π —Ç–µ–º –ø–æ–º–æ—â–∏
    bot.send_message(message.chat.id, help_text, parse_mode="Markdown", reply_markup=get_help_inline_keyboard())

@bot.message_handler(commands=['about'])
def about_command(message):
    """Send information about the bot."""
    about_text = (
        "*–û –±–æ—Ç–µ*\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è —Å–µ—Ç–∏ –º–∞–≥–∞–∑–∏–Ω–æ–≤, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –∫–ª–∏–µ–Ω—Ç–∞–º:\n"
        "‚Ä¢ –ù–∞–π—Ç–∏ –±–ª–∏–∂–∞–π—à–∏–π –º–∞–≥–∞–∑–∏–Ω\n"
        "‚Ä¢ –£–∑–Ω–∞—Ç—å –∞–¥—Ä–µ—Å –∏ —á–∞—Å—ã —Ä–∞–±–æ—Ç—ã\n"
        "‚Ä¢ –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–∞–≥–∞–∑–∏–Ω–æ–º —á–µ—Ä–µ–∑ Telegram\n\n"
        "–í–µ—Ä—Å–∏—è: 1.0.0\n"
        "–†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–æ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º pyTelegramBotAPI"
    )
    
    bot.send_message(message.chat.id, about_text, parse_mode="Markdown")

@bot.message_handler(commands=['stores'])
def stores_command(message):
    """Show list of stores."""
    show_stores_list(message)

def show_stores_list(message):
    """Show list of all stores with keyboard."""
    stores_text = (
        "*–ù–∞—à–∏ –º–∞–≥–∞–∑–∏–Ω—ã*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:"
    )
    
    bot.send_message(
        message.chat.id, 
        stores_text, 
        parse_mode="Markdown", 
        reply_markup=get_stores_keyboard()
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ –º–∞–≥–∞–∑–∏–Ω–∞
    user_states[message.from_user.id] = 'selecting_store'

def show_store_details(message, store_name):
    """Show details about a specific store."""
    # –ù–∞–π—Ç–∏ –º–∞–≥–∞–∑–∏–Ω –ø–æ –∏–º–µ–Ω–∏
    stores = get_all_stores()
    store = None
    
    for s in stores:
        if s['name'] == store_name:
            store = s
            break
    
    if not store:
        bot.send_message(
            message.chat.id, 
            f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞–≥–∞–∑–∏–Ω–µ '{store_name}'.", 
            reply_markup=get_stores_keyboard()
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞–≥–∞–∑–∏–Ω–µ
    store_info_text = get_store_info(store['id'])
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –¥–µ–π—Å—Ç–≤–∏–π
    bot.send_message(
        message.chat.id, 
        store_info_text, 
        parse_mode="Markdown", 
        reply_markup=get_store_actions_keyboard(store['id'], store['telegram'])
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç inline-–∫–Ω–æ–ø–æ–∫
@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    """Handle callback queries from inline keyboards."""
    user_id = call.from_user.id
    logger.info(f"Received callback from {user_id}: {call.data}")
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –ø–æ–º–æ—â–∏
    if call.data == 'help_stores':
        text = ("*–ö–∞–∫ –Ω–∞–π—Ç–∏ –º–∞–≥–∞–∑–∏–Ω*\n\n"
                "–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –±–ª–∏–∂–∞–π—à–∏–π –º–∞–≥–∞–∑–∏–Ω –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏:\n\n"
                "1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É 'üè™ –ú–∞–≥–∞–∑–∏–Ω—ã' –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é\n"
                "2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /stores\n"
                "3. –í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω –∏–∑ —Å–ø–∏—Å–∫–∞, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –µ–≥–æ –∞–¥—Ä–µ—Å –∏ –¥—Ä—É–≥—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é")
        bot.send_message(call.message.chat.id, text, parse_mode="Markdown")
        
    elif call.data == 'help_contact':
        text = ("*–ö–∞–∫ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –º–∞–≥–∞–∑–∏–Ω–æ–º*\n\n"
                "–ß—Ç–æ–±—ã —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –º–∞–≥–∞–∑–∏–Ω–æ–º:\n\n"
                "1. –í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω –∏–∑ —Å–ø–∏—Å–∫–∞\n"
                "2. –í –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–∞–≥–∞–∑–∏–Ω–µ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ù–∞–ø–∏—Å–∞—Ç—å –≤ Telegram'\n"
                "3. –í—ã –±—É–¥–µ—Ç–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ —á–∞—Ç Telegram —Å —ç—Ç–∏–º –º–∞–≥–∞–∑–∏–Ω–æ–º\n\n"
                "–¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–∑–≤–æ–Ω–∏—Ç—å –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É –º–∞–≥–∞–∑–∏–Ω–∞, —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –≤ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
        bot.send_message(call.message.chat.id, text, parse_mode="Markdown")
        
    elif call.data == 'help_text':
        text = ("*–¢–µ–∫—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã*\n\n"
                "–ë–æ—Ç –ø–æ–Ω–∏–º–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                "‚Ä¢ /start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
                "‚Ä¢ /help - –ø–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å\n"
                "‚Ä¢ /stores - —Å–ø–∏—Å–æ–∫ –º–∞–≥–∞–∑–∏–Ω–æ–≤\n"
                "‚Ä¢ /about - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ\n\n"
                "–¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞.")
        bot.send_message(call.message.chat.id, text, parse_mode="Markdown")
        
    elif call.data == 'back_to_main':
        help_command(call.message)
        
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –º–∞–≥–∞–∑–∏–Ω–∞–º–∏
    elif call.data == 'back_to_stores':
        show_stores_list(call.message)
        
    elif call.data.startswith('map_'):
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –º–∞–≥–∞–∑–∏–Ω–∞
        try:
            store_id = int(call.data.split('_')[1])
            store = get_store_by_id(store_id)
            
            if store:
                bot.send_message(
                    call.message.chat.id, 
                    f"–ö–∞—Ä—Ç–∞ –º–∞–≥–∞–∑–∏–Ω–∞ '{store['name']}'\n\n–ê–¥—Ä–µ—Å: {store['address']}\n\n"
                    f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å —É –º–µ–Ω—è –Ω–µ—Ç –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –∫–∞—Ä—Ç—ã, "
                    f"–Ω–æ –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ —ç—Ç–æ—Ç –∞–¥—Ä–µ—Å –≤ –ª—é–±–æ–º –∫–∞—Ä—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–º —Å–µ—Ä–≤–∏—Å–µ."
                )
            else:
                bot.send_message(call.message.chat.id, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞–≥–∞–∑–∏–Ω–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        except (ValueError, IndexError):
            bot.send_message(call.message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º Telegram, —á—Ç–æ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏ callback
    bot.answer_callback_query(call.id)

# Message handlers
@bot.message_handler(content_types=['text'])
def handle_text_message(message):
    """Handle text messages."""
    user_message = message.text
    user_id = message.from_user.id
    
    logger.info(f"Received text message from {user_id}: {user_message}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_state = user_states.get(user_id)
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    if user_message == 'üè™ –ú–∞–≥–∞–∑–∏–Ω—ã':
        show_stores_list(message)
        
    elif user_message == 'üîç –ü–æ–º–æ—â—å':
        help_command(message)
        
    elif user_message == '‚ÑπÔ∏è –û –±–æ—Ç–µ':
        about_command(message)
        
    elif user_message == 'üìù –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å':
        feedback_text = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤ –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ:"
        sent = bot.send_message(message.chat.id, feedback_text)
        bot.register_next_step_handler(sent, process_feedback)
        
    elif user_message == 'üîô –ù–∞–∑–∞–¥':
        back_text = "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
        bot.send_message(message.chat.id, back_text, reply_markup=get_main_keyboard())
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id in user_states:
            del user_states[user_id]
            
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ä–µ–∂–∏–º–µ –≤—ã–±–æ—Ä–∞ –º–∞–≥–∞–∑–∏–Ω–∞
    elif user_state == 'selecting_store':
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–∞–≥–∞–∑–∏–Ω –∏–∑ —Å–ø–∏—Å–∫–∞
        stores = get_all_stores()
        store_names = [store['name'] for store in stores]
        
        if user_message in store_names:
            show_store_details(message, user_message)
        else:
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –Ω–∏ –æ–¥–Ω–æ–º—É –º–∞–≥–∞–∑–∏–Ω—É
            bot.send_message(
                message.chat.id, 
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
                reply_markup=get_stores_keyboard()
            )
    else:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ª—é–±—ã–µ –¥—Ä—É–≥–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        response = f"–Ø –Ω–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ –≤—ã –∏–º–µ–µ—Ç–µ –≤ –≤–∏–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏."
        bot.send_message(message.chat.id, response, reply_markup=get_main_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
def process_feedback(message):
    """Process feedback message."""
    feedback = message.text
    user_id = message.from_user.id
    
    logger.info(f"Received feedback from {user_id}: {feedback}")
    
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–∑—ã–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    
    thank_you = "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! –ú—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –µ–≥–æ."
    bot.send_message(message.chat.id, thank_you, reply_markup=get_main_keyboard())

# Flask web app for webhook (production) mode
app = Flask(__name__)

@app.route('/')
def index():
    bot_info = bot.get_me()
    html = f"""
    <!DOCTYPE html>
    <html lang="ru">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Telegram Bot - {bot_info.first_name}</title>
        <link href="https://cdn.replit.com/agent/bootstrap-agent-dark-theme.min.css" rel="stylesheet">
        <style>
            body {{
                padding: 20px;
            }}
            .container {{
                max-width: 800px;
                margin: 0 auto;
            }}
            .feature-list {{
                margin-top: 20px;
            }}
            .feature-item {{
                margin-bottom: 10px;
            }}
        </style>
    </head>
    <body data-bs-theme="dark">
        <div class="container">
            <div class="py-5 text-center">
                <h1>–ë–æ—Ç –¥–ª—è —Å–µ—Ç–∏ –º–∞–≥–∞–∑–∏–Ω–æ–≤ - {bot_info.first_name}</h1>
                <p class="lead">–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞–º –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞–≥–∞–∑–∏–Ω–∞—Ö –∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∏–º–∏.</p>
                <a href="https://t.me/{bot_info.username}" class="btn btn-primary" target="_blank">
                    –û—Ç–∫—Ä—ã—Ç—å –±–æ—Ç–∞ –≤ Telegram
                </a>
            </div>
            
            <div class="row feature-list">
                <div class="col-md-6">
                    <div class="card mb-4">
                        <div class="card-header">
                            <h3>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞</h3>
                        </div>
                        <div class="card-body">
                            <ul class="list-group list-group-flush">
                                <li class="list-group-item">–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –º–∞–≥–∞–∑–∏–Ω–æ–≤</li>
                                <li class="list-group-item">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–∂–¥–æ–º –º–∞–≥–∞–∑–∏–Ω–µ</li>
                                <li class="list-group-item">–°–≤—è–∑—å —Å –º–∞–≥–∞–∑–∏–Ω–∞–º–∏ —á–µ—Ä–µ–∑ Telegram</li>
                                <li class="list-group-item">–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å</li>
                            </ul>
                        </div>
                    </div>
                </div>
                
                <div class="col-md-6">
                    <div class="card mb-4">
                        <div class="card-header">
                            <h3>–ö–æ–º–∞–Ω–¥—ã</h3>
                        </div>
                        <div class="card-body">
                            <ul class="list-group list-group-flush">
                                <li class="list-group-item">/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞</li>
                                <li class="list-group-item">/help - –ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é</li>
                                <li class="list-group-item">/stores - –°–ø–∏—Å–æ–∫ –º–∞–≥–∞–∑–∏–Ω–æ–≤</li>
                                <li class="list-group-item">/about - –û –±–æ—Ç–µ</li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="text-center py-3 mt-3">
                <p>–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞: <span class="badge bg-success">–û–Ω–ª–∞–π–Ω</span></p>
                <p class="text-muted">¬© 2025 –°–µ—Ç—å –º–∞–≥–∞–∑–∏–Ω–æ–≤</p>
            </div>
        </div>
    </body>
    </html>
    """
    return html

@app.route('/webhook', methods=['POST'])
def webhook():
    if request.headers.get('content-type') == 'application/json':
        json_string = request.get_data().decode('utf-8')
        update = telebot.types.Update.de_json(json_string)
        bot.process_new_updates([update])
        return ''
    return 'OK'

# Configure webhook for production
def setup_webhook(url):
    bot.remove_webhook()
    bot.set_webhook(url=url + '/webhook')
    logger.info(f"Webhook set to {url}/webhook")

# Entry point
if __name__ == "__main__":
    # Use polling for development (Replit)
    # Check if we're running in the Flask server or standalone
    if os.environ.get('FLASK_RUN', '0') == '1':
        # We're running within the Flask/Gunicorn server, don't start polling
        logger.info("Running in Flask mode")
        webhook_url = os.environ.get('WEBHOOK_URL')
        if webhook_url:
            setup_webhook(webhook_url)
    else:
        # We're running standalone, start polling
        logger.info("Starting bot in polling mode...")
        bot.remove_webhook()
        bot.infinity_polling()